{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","Header.js","Scroll.js","ErrorBoundry.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","rob","className","src","id","alt","name","email","CardList","robotsJSX","props","robots","map","key","Header","inputHandler","type","placeholder","onInput","Scroll","style","overflowY","height","children","state","Error","this","setState","Erorr","console","log","React","Component","App","event","searchFieldValue","target","value","toLowerCase","fetch","then","res","json","filteredRobots","filter","robo","includes","ErrorBoundry","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCLSC,G,MAVF,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACZ,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAAIG,GAA9B,iBAAiDC,IAAI,UAC7D,4BAAKJ,EAAIK,MACT,2BAAIL,EAAIM,U,SCILC,EATE,WAEb,IAAMC,EAAY,EAAKC,MAAMC,OAAOC,KAAI,SAAAX,GACpC,OACI,kBAAC,EAAD,CAAMY,IAAKZ,EAAIG,GAAIH,IAAKA,OAGhC,OAAQ,6BAAMQ,ICCHK,EATA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACd,OACI,6BACI,2CACA,2BAAOC,KAAK,OAAOd,UAAU,mCAAmCe,YAAY,gBAAgBC,QAASH,MCIlGI,EARA,SAACT,GACZ,OACI,yBAAKU,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACrCZ,EAAMa,WCeJf,E,kDAhBX,aAAc,IAAD,8BACT,gBACKgB,MAAQ,CACTC,OAAO,GAHF,E,gEAOTC,KAAKC,SAAS,CAACC,OAAO,IACtBC,QAAQC,IAAI,gB,+BAIZ,OAAGJ,KAAKF,MAAMC,MAAc,4DACrBC,KAAKhB,MAAMa,a,GAfHQ,IAAMC,WCqCdC,E,kDAhCX,aAAe,IAAD,8BACV,gBAMJlB,aAAe,SAACmB,GACZ,EAAKP,SAAS,CAAEQ,iBAAkBD,EAAME,OAAOC,MAAMC,iBANrD,EAAKd,MAAQ,CACTb,OAAQ,GACRwB,iBAAkB,IAJZ,E,gEAUO,IAAD,OAChBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAC7B,GAC9E,EAAKgB,SAAS,CAAEhB,gB,+BAGd,IAAD,OACCgC,EAAiBjB,KAAKF,MAAMb,OAAOiC,QAAO,SAACC,GAC7C,OAAOA,EAAKvC,KAAKgC,cAAcQ,SAAS,EAAKtB,MAAMW,qBAEvD,OACI,yBAAKjC,UAAU,MACX,kBAAC,EAAD,CAAQa,aAAcW,KAAKX,eAC3B,kBAAC,EAAD,KACI,kBAACgC,EAAD,KACI,kBAAC,EAAD,CAAUpC,OAAQgC,W,GAzBxBX,aCAlBgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SPyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.bdce3418.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Card = ({ rob }) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${rob.id}?size=200x200`} alt=\"robot\" />\r\n            <h2>{rob.name}</h2>\r\n            <p>{rob.email}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = () => {\r\n\r\n    const robotsJSX = this.props.robots.map(rob => {\r\n        return (\r\n            <Card key={rob.id} rob={rob} />\r\n        );\r\n    })\r\n    return (<div>{robotsJSX}</div>);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Header = ({ inputHandler }) => {\r\n    return (\r\n        <div>\r\n            <h2>RoboFriends</h2>\r\n            <input type=\"text\" className=\"pa3 ba b--green bg-lightest-blue\" placeholder=\"search robots\" onInput={inputHandler} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return (\r\n        <div style={{overflowY: 'scroll', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass CardList extends React.Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            Error: false\r\n        }\r\n    }\r\n    componentDidCatch(){\r\n        this.setState({Erorr: true});\r\n        console.log(\"errrrrrrrr\");\r\n    }\r\n\r\n    render() {\r\n        if(this.state.Error) return <h1>ooops, something went wrong.</h1>\r\n        return this.props.children;\r\n    }\r\n}\r\nexport default CardList;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport Header from './Header';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundry from './ErrorBoundry';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchFieldValue: ''\r\n        }\r\n    }\r\n    inputHandler = (event) => {\r\n        this.setState({ searchFieldValue: event.target.value.toLowerCase() });\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(res => res.json()).then((robots) => {\r\n            this.setState({ robots });\r\n        });\r\n    }\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter((robo) => {\r\n            return robo.name.toLowerCase().includes(this.state.searchFieldValue)\r\n        })\r\n        return (\r\n            <div className=\"tc\">\r\n                <Header inputHandler={this.inputHandler} />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots} />\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}